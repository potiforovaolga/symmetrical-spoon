# Этап 1: Сборка Go-приложения
FROM golang AS builder
# Устанавливаем рабочий каталог внутри контейнера
WORKDIR /go
# Копируем файл server.go из текущей директории в рабочий каталог контейнера
COPY server.go .

# Выполняем команду 'go build' для компиляции Go-приложения
# CGO_ENABLED=0 отключает использование Cgo, которое не требуется в данном случае
# GOOS=linux задаёт целевую операционную систему как Linux
# GOARCH=amd64 задаёт целевую архитектуру как AMD64 (64-битная)
# -o server задаёт имя выходного файла для скомпилированного бинарного файла
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o server server.go

# Этап 2: Создание производственного образа
FROM debian:bullseye-slim as prod
# Устанавливаем рабочий каталог внутри контейнера
WORKDIR /go
# Копируем скомпилированный бинарный файл 'server' из этапа 'builder' в рабочий каталог производственного образа
COPY --from=builder /go/server .
# Запускаем бинарный файл 'server' при запуске контейнера
CMD ["./server"]
